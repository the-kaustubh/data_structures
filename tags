!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CDLL_BLOCK_SIZE	LinkedLists/circularDoublyLinkedList.h	/^const long unsigned int CDLL_BLOCK_SIZE = sizeof(struct node);$/;"	v
DFS	Graph/Graph.c	/^void DFS(struct adjMat *am, int rootNode, int *visited) {$/;"	f
DLL_BLOCK_SIZE	LinkedLists/doublyLinkedList.h	/^long unsigned int DLL_BLOCK_SIZE = sizeof(struct node);$/;"	v
DeQueue	Queue/Queue.c	/^int DeQueue(Queue q) {$/;"	f
EnQueue	Queue/Queue.c	/^void EnQueue(Queue q, int value) {$/;"	f
LL_BLOCK_SIZE	LinkedLists/LinkedList.h	17;"	d
NODE_SIZE	Trees/BinarySearchTree.h	10;"	d
Node	LinkedLists/LinkedList.h	/^}* Node;$/;"	t	typeref:struct:node
Node	LinkedLists/circularDoublyLinkedList.h	/^} *Node;$/;"	t	typeref:struct:node
Node	LinkedLists/doublyLinkedList.h	/^}*Node;$/;"	t	typeref:struct:node
Queue	Graph/Queue.h	/^ } *Queue;$/;"	t	typeref:struct:queue
Queue	Queue/Queue.h	/^ } *Queue;$/;"	t	typeref:struct:queue
Stack	Stacks/stack.h	/^} *Stack;$/;"	t	typeref:struct:stack
__GRAPH_H	Graph/Graph.h	2;"	d
__LL_H	LinkedLists/LinkedList.h	11;"	d
__STACK_H	Stacks/stack.h	2;"	d
__TREE_H	Trees/BinarySearchTree.h	2;"	d
__adjust__	Queue/Queue.c	/^static void __adjust__(int * arr, int end) {$/;"	f	file:
adjMat	Graph/Graph.h	/^struct adjMat {$/;"	s
adjacencyMatrix	Graph/Graph.h	/^ int **adjacencyMatrix;$/;"	m	struct:adjMat
breadthFirstSearch	Graph/Graph.c	/^void breadthFirstSearch(struct adjMat *am, int rootNode) {$/;"	f
clearTree	Trees/BinarySearchTree.c	/^void clearTree(struct node *Node) {$/;"	f
constructMatrix	Graph/Graph.c	/^void constructMatrix(struct adjMat *am) {$/;"	f
createNode	Trees/BinarySearchTree.c	/^struct node * createNode(int data) {$/;"	f
createNodeCDLL	LinkedLists/circularDoublyLinkedList.c	/^Node createNodeCDLL(int data) {$/;"	f
createNodeDLL	LinkedLists/doublyLinkedList.c	/^Node createNodeDLL(int data) {$/;"	f
createNodeLL	LinkedLists/LinkedList.c	/^Node createNodeLL(int data) {$/;"	f
createQueue	Queue/Queue.c	/^Queue createQueue(int size) {$/;"	f
createStack	Stacks/stack.c	/^Stack createStack(int size) {$/;"	f
data	Graph/Queue.h	/^  int *data;$/;"	m	struct:queue
data	LinkedLists/LinkedList.h	/^  int data;$/;"	m	struct:node
data	LinkedLists/circularDoublyLinkedList.h	/^  int data;$/;"	m	struct:node
data	LinkedLists/doublyLinkedList.h	/^  int data;$/;"	m	struct:node
data	Queue/Queue.h	/^  int *data;$/;"	m	struct:queue
data	Stacks/stack.h	/^  int *data;$/;"	m	struct:stack
data	Trees/BinarySearchTree.h	/^ int data;$/;"	m	struct:node
deleteKeyDLL	LinkedLists/circularDoublyLinkedList.c	/^Node deleteKeyDLL(Node start, int key) {$/;"	f
deleteKeyDLL	LinkedLists/doublyLinkedList.c	/^Node deleteKeyDLL(Node start, int key) {$/;"	f
deleteKeyLL	LinkedLists/LinkedList.c	/^Node deleteKeyLL(Node start, int key) {$/;"	f
deletePositionDLL	LinkedLists/circularDoublyLinkedList.c	/^Node deletePositionDLL(Node start, int pos) {$/;"	f
deletePositionDLL	LinkedLists/doublyLinkedList.c	/^Node deletePositionDLL(Node start, int pos) {$/;"	f
deletePositionLL	LinkedLists/LinkedList.c	/^Node deletePositionLL(Node start, int pos) {$/;"	f
depthFirstSearch	Graph/Graph.c	/^void depthFirstSearch(struct adjMat *am, int rootNode) {$/;"	f
destroyStack	Stacks/stack.c	/^void destroyStack(Stack s) {$/;"	f
dimension	Graph/Graph.h	/^ int dimension;$/;"	m	struct:adjMat
displayQueue	Queue/Queue.c	/^void displayQueue(Queue q) {$/;"	f
displayStack	Stacks/stack.c	/^void displayStack(Stack s) {$/;"	f
freeAdjMat	Graph/Graph.c	/^void freeAdjMat(struct adjMat *am) {$/;"	f
freeLL	LinkedLists/LinkedList.c	/^void freeLL(Node n) {$/;"	f
freeQueue	Queue/Queue.c	/^void freeQueue(Queue q) {$/;"	f
inOrder	Trees/BinarySearchTree.c	/^void inOrder(struct node *root) {$/;"	f
insert	Trees/BinarySearchTree.c	/^struct node * insert(struct node * Node, int data) {$/;"	f
insertAtEnd	LinkedLists/circularDoublyLinkedList.c	/^Node insertAtEnd(Node start, int data) {$/;"	f
insertAtEndDLL	LinkedLists/doublyLinkedList.c	/^Node insertAtEndDLL(Node start, int data) {$/;"	f
insertAtPosition	LinkedLists/circularDoublyLinkedList.c	/^Node insertAtPosition(Node start, int data, int pos) {$/;"	f
insertAtPositionDLL	LinkedLists/doublyLinkedList.c	/^Node insertAtPositionDLL(Node start, int data, int pos) {$/;"	f
insertAtStart	LinkedLists/circularDoublyLinkedList.c	/^Node insertAtStart(Node start, int data) {$/;"	f
insertAtStartDLL	LinkedLists/doublyLinkedList.c	/^Node insertAtStartDLL(Node start, int data) {$/;"	f
insertNodeAtEndLL	LinkedLists/LinkedList.c	/^Node insertNodeAtEndLL(Node start, int data) {$/;"	f
insertNodeAtPositionLL	LinkedLists/LinkedList.c	/^Node insertNodeAtPositionLL(Node start, int data, int pos) {$/;"	f
insertNodeAtStartLL	LinkedLists/LinkedList.c	/^Node insertNodeAtStartLL(Node start, int data) {$/;"	f
isEmpty	Queue/Queue.c	/^int isEmpty(Queue q) {$/;"	f
isEmpty	Stacks/stack.c	/^int isEmpty(Stack s) {$/;"	f
isFull	Stacks/stack.c	/^int isFull(Stack s) {$/;"	f
left	Trees/BinarySearchTree.h	/^ struct node *left;$/;"	m	struct:node	typeref:struct:node::node
main	Graph/testBFS.c	/^void main() {$/;"	f
main	Graph/testDFS.c	/^void main() {$/;"	f
main	LinkedLists/testLL.c	/^void main() {$/;"	f
main	Stacks/testStack.c	/^int main(int argc, char *argv[]) {$/;"	f
main	Trees/testBST.c	/^void main() {$/;"	f
mapNumToLetter	Graph/Graph.c	/^char mapNumToLetter(int num) {$/;"	f
next	LinkedLists/LinkedList.h	/^  struct node * next;$/;"	m	struct:node	typeref:struct:node::node
next	LinkedLists/circularDoublyLinkedList.h	/^  struct node * next;$/;"	m	struct:node	typeref:struct:node::node
next	LinkedLists/doublyLinkedList.h	/^  struct node * next;$/;"	m	struct:node	typeref:struct:node::node
node	LinkedLists/LinkedList.h	/^typedef struct node {$/;"	s
node	LinkedLists/circularDoublyLinkedList.h	/^typedef struct node {$/;"	s
node	LinkedLists/doublyLinkedList.h	/^typedef struct node {$/;"	s
node	Trees/BinarySearchTree.h	/^struct node {$/;"	s
postOrder	Trees/BinarySearchTree.c	/^void postOrder(struct node *root) {$/;"	f
preOrder	Trees/BinarySearchTree.c	/^void preOrder(struct node *root) {$/;"	f
prev	LinkedLists/circularDoublyLinkedList.h	/^  struct node * prev;$/;"	m	struct:node	typeref:struct:node::node
prev	LinkedLists/doublyLinkedList.h	/^  struct node * prev;$/;"	m	struct:node	typeref:struct:node::node
printArr	Stacks/testStack.c	/^void printArr(int * k, int len) {$/;"	f
printMatrix	Graph/Graph.c	/^void printMatrix(struct adjMat *am) {$/;"	f
queue	Graph/Queue.h	/^ typedef struct queue {$/;"	s
queue	Queue/Queue.h	/^ typedef struct queue {$/;"	s
rear	Graph/Queue.h	/^  int size, rear;$/;"	m	struct:queue
rear	Queue/Queue.h	/^  int size, rear;$/;"	m	struct:queue
right	Trees/BinarySearchTree.h	/^ struct node * right;$/;"	m	struct:node	typeref:struct:node::node
scanMatrix	Graph/Graph.c	/^void scanMatrix(struct adjMat *am) {$/;"	f
searchNode	Trees/BinarySearchTree.c	/^int searchNode(struct node * Node, int key) {$/;"	f
size	Graph/Queue.h	/^  int size, rear;$/;"	m	struct:queue
size	Queue/Queue.h	/^  int size, rear;$/;"	m	struct:queue
size	Stacks/stack.h	/^  int top, size;$/;"	m	struct:stack
stPeek	Stacks/stack.c	/^int stPeek(Stack s) {$/;"	f
stPop	Stacks/stack.c	/^int stPop(Stack s) {$/;"	f
stPush	Stacks/stack.c	/^int stPush(Stack s, int value) {$/;"	f
stack	Stacks/stack.h	/^typedef struct stack {$/;"	s
top	Stacks/stack.h	/^  int top, size;$/;"	m	struct:stack
